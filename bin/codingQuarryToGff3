#!/usr/bin/env perl

# Takes a the coding quarry output gff and converts it into a proper gff3 format suitable for use with maker2. Conforms to SO standards.
# Usage: codingQuarryGff PredictedPass.gff3 > PredictedPass.reformatted.gff3

if (!@ARGV){
	die("\n$0 PredictedPass.gff3 > PredictedPass.reformatted.gff3\n\n");
}

use strict;
use warnings;

my $start;
my $end;
my $gene_test_start;
my $gene_test_end;
my $count = 1;
my $parent;

open my $file, "<", $ARGV[0] or die;
while (my $line = <$file>){
	chomp $line;
	my @fields = split "\t", $line;
	my @attributes	= split /=|;/, $fields[8];
	if ($fields[2] eq "gene"){
		if ($fields[6] eq "-"){
		$start	= $fields[3] - 3;
		$end	= $fields[4];
	}
	else {
		$start	= $fields[3];
		$end	= $fields[4] + 3;
	}
	$gene_test_start	= $fields[3];
	$gene_test_end		= $fields[4];
	$count			= 1;
	$parent			= $attributes[1];
	print join (	"\t", @fields[0..2]) .
			 "\t$start\t$end\t" . 
			join ("\t", @fields[5..7]) . 
			"\tID=$parent;Name=$parent\n";
	print join (	"\t", @fields[0..1]) . "\tmRNA\t" . 
			"$start\t$end\t" . 
			join ("\t", @fields[5..7]) . 
			"\tID=mRNA.$parent;Name=mRNA.$parent;Parent=$parent\n";
	}
	if ($fields[2] eq "CDS"){
		if ($fields[3] == $gene_test_start){
			if ($fields[6] eq "-"){
				$start	= $fields[3] - 3;
			}
			else {
				$start	= $fields[3];
			}
		}
	if ($fields[3] != $gene_test_start){
		$start	= $fields[3];
	}
	if ($fields[4] == $gene_test_end){
		if ($fields[6] eq "+"){
			$end	= $fields[4] + 3;
		}
		else {
			$end	= $fields[4];
		}
        }
	if ($fields[4] != $gene_test_end){
		$end = $fields[4];
	}
	print join (	"\t", @fields[0..2]) . 
			"\t$start\t$end\t" . 
			join ("\t", @fields[5..7]) . 
			"\tID=cds.$count.$parent;Name=cds.$count.$parent;Parent=mRNA.$parent\n";
	print join (	"\t", @fields[0..1]) . 
			"\texon\t$start\t$end\t" . 
			join ("\t", @fields[5..6]) . 
			"\t.\tID=exon.$count.$parent;Name=exon.$count.$parent;Parent=mRNA.$parent\n";
	$count++;
	}
}
