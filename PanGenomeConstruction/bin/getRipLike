#!/usr/bin/env perl

$| = 1;
use strict;
use warnings;
use Getopt::Long;
use Bio::DB::Fasta;

# Script to add comments to vcf file declaring whether a mutation is 'RIP-like' or not.
my ($vcf, $reference, $output, $verbose);

GetOptions(	"--vcf=s" 	=> \$vcf,
		"--reference=s"	=> \$reference,
		"--output:s"	=> \$output,
		"--verbose"	=> \$verbose	);

my $usage	= <<USAGE;


	getRipLike
	**********
	
	Find Repeat Induced Point mutation (RIP) style variants in a vcf given the reference genome used to create it.
	
	$0 --vcf <vcf file> --reference <reference genome> --output <output prefix> --verbose

	- 	Takes a vcf formatted file and determines which snps are 'RIP-like'.
	-	Also requires the reference genome file (the one that contributes alleles to the REF column in the vcf.
	-	Will add descriptors to vcf description field if a snp is 'RIP-like'.
	-	Requires bioperl.

USAGE

if ((!$vcf) or (!$reference)){
	die("\n$usage\n\n");
}

if (!$output){
	$output	= "out";
	print "\nOutput prefix defaulting to $output.\n\n" if $verbose;
}

# Create a sequence database of the reference.
my $db	= Bio::DB::Fasta->new($reference);

# Initialise a hash of arrays containing dinucleotides and their corresponding RIP-like mutated dinucleotides.
my %riplike	= (	"CA"	=> ["TA", "CpA<->TpA"],
			"TG"	=> ["TA", "CpA<->TpA"],
			"CC"	=> ["TC", "CpC<->TpC"],
			"GG"	=> ["GA", "CpC<->TpC"],
			"CG"	=> ["TG", "CpG<->TpG"],
			"CG"	=> ["CA", "CpG<->TpG"],
			"CT"	=> ["TT", "CpT<->TpT"],
			"AG"	=> ["AA", "CpT<->TpT"]	);

# Open vcf and output files.
open my $FH, $vcf or die ("\n$vcf not readable.\n\n");
open my $OFH,">", "$output.ripLike.vcf" or die ("\n$output is not writeable.\n\n");

my %hash;
# Read in vcf and get dinucleotide reference and alt sequences and determine whether they are 'RIP-like' or not.
while (my $line = <$FH>){
	if ($line =~ /^#/){
		print $OFH $line;
		next;
	}
	else{
		chomp $line;
		my @fields	= split(/\s+/, $line);
		$hash{"$fields[0]-$fields[1]"} = \@fields;
	}
}
close $FH;

for my $key (sort {$hash{$a}[0] cmp $hash{$b}[0] or $hash{$a}[1] <=> $hash{$b}[1]} keys %hash){
	my @array	= @{$hash{$key}};
	my ($chr, $pos) = split("-", $key);
	my $ppos	= $pos - 1;
	my $apos	= $pos + 1;
	my $pref		= $db->seq($chr, $ppos, $pos);
	my $aref		= $db->seq($chr, $pos, $apos);
	my ($palt, $aalt);
	if ($hash{"$chr-$ppos"}){
		$palt	= $hash{"$chr-$ppos"}[4] . $hash{$key}[4] if length(split("", $hash{"$chr-$ppos"}[4])) == 1;
	}
	else{
		$palt	= $db->seq($chr, $ppos, $ppos) . $hash{$key}[4];
	}
	if ($hash{"$chr-$apos"}){
		$aalt	= $hash{$key}[4] . $hash{"$chr-$apos"}[4] if length(split("", $hash{"$chr-$apos"}[4])) == 1;
	}
	else{
		$aalt	= $hash{$key}[4] . $db->seq($chr, $apos, $apos);
	}
	if ($riplike{$pref} and $palt){
		if ($riplike{$pref}->[0] eq $palt){
			$hash{$key}[7] =~ s/\Q$hash{$key}[7]/$hash{$key}[7];RIP=$riplike{$pref}->[1],$pref~$palt/g;
		}
	}
	if ($riplike{$aref} and $aalt){
		if ($riplike{$aref}->[0] eq $aalt){
			$hash{$key}[7] =~ s/\Q$hash{$key}[7]/$hash{$key}[7];RIP=$riplike{$aref}->[1],$aref~$aalt/g;
		}
	}
	if ($palt and $riplike{$palt}){
		if ($riplike{$palt}->[0] eq $pref){
			$hash{$key}[7] =~ s/\Q$hash{$key}[7]/$hash{$key}[7];RIP=$riplike{$palt}->[1],$palt~$pref/g;
		}
	}
	if ($aalt and $riplike{$aalt}){
		if ($riplike{$aalt}->[0] eq $aref){
			$hash{$key}[7] =~ s/\Q$hash{$key}[7]/$hash{$key}[7];RIP=$riplike{$aalt}->[1],$aalt~$aref/g;
		}
	}
	print $OFH join ("\t", @{$hash{$key}}) . "\n";
}
close $OFH;
