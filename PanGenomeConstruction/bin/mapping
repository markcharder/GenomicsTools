#!/usr/bin/env perl

# This script incorporates various software packages into an easy to use pipeline for mapping reads to a reference.

BEGIN {
	my $PERLPATH;
	open my $fh, '<', 'config.txt';
	while (my $line = <$fh>){
		if ($line =~ /PERLPATH/){
			chomp $line;
		my @fields	= split "=", $line;
		$PERLPATH	= $fields[1];
		}
	}
	close $fh;
	if (!$PERLPATH) {
		die ("\nPlease set path to perl scripts in config.txt\n");
		}
	push @INC, $PERLPATH;
}

use strict;
use warnings;
use File::Basename;
use Getopt::Long;
use PanGenome::Map;
use PanGenome::General;

Getopt::Long::Configure(qw{no_auto_abbrev no_ignore_case_always});

# Parse command line options.
my (	$reference,
	$reads,
	$verbose,
	$help,
	$threads,
	$results,
	$prefix		)	= ("", "", "", "", 1, "", "run_$$");

my $config = "config.txt";

GetOptions('reference|f=s'	=> \$reference,
	   'reads|r=s'		=> \$reads,
	   'threads|t:s'	=> \$threads,
	   'verbose|v'		=> \$verbose,
	   'help|h'		=> \$help,
	   'prefix|p:s'		=> \$prefix	);

my $usageShort = <<USAGESHORT;

	mapping
	*******

        $0 --reference <reference fasta> --reads <reads fastq> 

	  [--verbose 
	   --threads 
	   --prefix <prefix> 
	   --help]


USAGESHORT

my $usageLong =<<USAGELONG;

	mapping
	*******
	
        $0 --reference <reference fasta> --reads <reads fastq> 
	  [--verbose 
	   --threads
	   --prefix <prefix>
	   --help]


        Required:
        --reference/-f <reference fasta>        -       Reference genome for pan genome analysis.
        --reads/-r <reads fastq>        	-       Short reads for all isolates other than the reference. Paired = R1,R2; Unpaired = UP; Mixed = R1,R2,UP.

        Optional:
	--threads/-t				-	Threads to use for software packages called.
        --verbose/-v    			-	Print messages to stdout during run time.
	--prefix/-p <prefix>			-	Prefix for outputs.
        --help/-h       			-	Print this message.


USAGELONG

# If help or options not set, die with usage message.
if ($help){
	die ("\n$usageLong\n");
}

if (($reference or $reads) eq ""){
	die ("\n$usageShort\n");
}

# Create output directory and print verbose start message if necessary.
PanGenome::General::outputDir($prefix);
my $time	= localtime();
PanGenome::General::verboseMessage("Script began at $time\n", $verbose);
my ($GATKPATH, $PICARDPATH)	= PanGenome::General::parseConfig();

# Get reads file from comma separated input list. Map them to the reference with bwa.
my @readsFiles = PanGenome::General::parseOptions($reads);
my @sams = PanGenome::Map::alignBwa($prefix, $reference, $threads, @readsFiles);
PanGenome::General::verboseMessage("Reads mapped to reference with bwa at $time\n", $verbose);
my @bams;

# Convert all sams from the bwa mapping to bams.
foreach my $item (@sams) {
	if ($item) {
		PanGenome::Map::samToBam($prefix, $reference, $threads, $item);
		push @bams, $item;
	}
}
my $sorted;
my $output;
PanGenome::General::verboseMessage("Converted sams to bams at $time\n", $verbose);

# If more than one type of reads file was supplied, i.e. fr and u, merge bam files.
# Then sort merged file or file from previous step depending on number of reads types.
if (@bams > 1) {
	for (@bams) {
		s/\.sam/.bam/g;
	}
	$output	= PanGenome::Map::mergeBams($prefix, @bams);
	$sorted	= PanGenome::Map::sortBam($prefix, $output);
}
else {
	for (@bams) {
		s/\.sam/.bam/g;
	}
	foreach my $item (@bams) {
		$sorted	= PanGenome::Map::sortBam($prefix, $item);
	}
}

PanGenome::General::verboseMessage("Bams sorted at $time\n", $verbose);

# Map reads based on BWA bams using Stampy.
my $stampySam			= PanGenome::Map::alignStampy($prefix, $reference, $threads, $sorted);
PanGenome::General::verboseMessage("Reads mapped to reference with Stampy at $time\n", $verbose);

# Convert Stampy bams to sams.
my $stampyBam			= PanGenome::Map::samToBam($prefix, $reference, $threads, $stampySam);
PanGenome::General::verboseMessage("Converted stampy sam to bam at $time\n", $verbose);

# Reformat bams for genotyping with GATK, remove duplicates etc.
my ($fixed, @intermediates)	= PanGenome::Map::fixBam($prefix, $PICARDPATH, $reference, $stampyBam);
PanGenome::General::verboseMessage("Fixed stampy bams at $time\n", $verbose);

# Create a filtered bam file that only contains reads with single site mappings.
my $filteredBam			= PanGenome::Map::filterMultiMap($prefix, $fixed);
PanGenome::General::verboseMessage("Filtered stampy bam at $time\n", $verbose);

# Get rid of intermediate files.
my $sams;
if (@sams != 1){
	$sams = join (" ", @sams);
}
else {
	$sams = $sams[0];
}
# Remove intermediate files.
PanGenome::General::cleanUp($stampySam, $stampyBam, $sams, join(" ",@intermediates));

# Print verbose end message if necessary.
PanGenome::General::verboseMessage("\nScript ended at $time\n", $verbose);
